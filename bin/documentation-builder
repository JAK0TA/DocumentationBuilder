#!/bin/bash


### Do not changs anything after this line, unless you know exactly what you are doing!!

DocsSourceBuilderStartFolder="";

# Check for command line arguments
if [ ! "$1" ];then
   echo "No config json file was given!"
   exit 1;
fi

# Get the where the script was started from path
FromPath=$PWD;

if [ ! -f "$FromPath/$1" ]; then
  printf "\n -> DocBuild canceled, config json does not exist.\n\n\n"

  exit 1;
fi

# Check if all parameter in config json are set
ConfigChecks="OK"
StartFolder=$(sed -n 's/.*\"StartFolder\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$StartFolder" ]
then
  printf "\n -> DocBuild canceled: Start folder was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
DocumentationFolder=$(sed -n 's/.*\"DocumentationFolder\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$DocumentationFolder" ]
then
  printf "\n -> DocBuild canceled: Documentation folder was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
DocumentationType=$(sed -n 's/.*\"DocumentationType\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$DocumentationType" ]
then
  printf "\n -> DocBuild canceled: Documentation type was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Project=$(sed -n 's/.*\"Project\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$Project" ]
then
  printf "\n -> DocBuild canceled: Project was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Copyright=$(sed -n 's/.*\"Copyright\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$Copyright" ]
then
  printf "\n -> DocBuild canceled: Copyright was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Author=$(sed -n 's/.*\"Author\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$Author" ]
then
  printf "\n -> DocBuild canceled: Author was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Release=$(sed -n 's/.*\"Release\".*:.*\"\(.*\)\".*/\1/p' $FromPath/$1)
if [ -z "$Author" ]
then
  printf "\n -> DocBuild canceled: Release was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi

# Check if the start folder exists relative from the start path
if [ -d "$FromPath/$StartFolder" ]
then
  DocsSourceBuilderStartFolder="$FromPath/$StartFolder";
else
  # If not check absolute
  if [ -d "$StartFolder" ]
  then
    DocsSourceBuilderStartFolder="$StartFolder";
  else
    echo "Start folder $StartFolder was not found";
    exit 1
  fi
fi

# Check if the documentation exists relative from the start path
if [ -d "$FromPath/$DocumentationFolder" ]
then
  DocsBuildFolder="$FromPath/$DocumentationFolder";
else
  # If not check absolute
  if [ -d "$DocumentationFolder" ]
  then
    DocsBuildFolder="$DocumentationFolder";
  else
    echo "Documentation folder $DocumentationFolder was not found";
    exit 1
  fi
fi

DocsSourceFolder='./source';

# Helper function to create a file in a source path and create folders if needed
atouch() {
  mkdir -p $(sed 's/\(.*\)\/.*/\1/' <<< $1) && touch $1
}

# Get the path this script is in
ScriptPath=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )'/..'
DocBuilderRoot=$(pushd $ScriptPath > /dev/null && pwd && popd > /dev/null)

# Setup clean source folder
test -d $DocBuilderRoot/$DocsSourceFolder && rm -rf $DocBuilderRoot/$DocsSourceFolder || : 
mkdir -p $DocBuilderRoot/$DocsSourceFolder
cp -r $DocBuilderRoot/_static $DocBuilderRoot/$DocsSourceFolder/
cp -r $DocBuilderRoot/_templates $DocBuilderRoot/$DocsSourceFolder/

TocTree='';
# Lookup all files starting at $DocsSourceBuilderStartFolder
for file in `find $DocsSourceBuilderStartFolder -name "*.php" -type f`; do

  # Search for DocBlocks
  OLDIFS=$IFS; IFS=';' DocBlocks=$(sed -n '/Documentation:Start/,/Documentation:End/ {/Documentation:Start/ s/^/\;/; p;}' $file);
  for DocBlock in ${DocBlocks#;}; do 

      # Get the block Indent to remove the leading * from every line
      DocBlockStart=$(echo "$DocBlock" | grep 'Documentation:Start');
      DocBlockIndent=$(echo "$DocBlock" | grep -bo '/\*\*' | sed 's/:.*$//');
      DocBlockIndent="$((DocBlockIndent + 2))"

      # Clean up DocBlock by removing php commend styles and cut of closing DocBlock line
      DocBlock=$(echo "$DocBlock" | sed -r "s/^.{$DocBlockIndent}//" | sed 's/^Documentation:End*//');
      DocBlockFile=$(echo "$DocBlock" | grep  'Documentation:Start' | sed 's/^.*Documentation:Start://' | sed 's/.rst.//');

      # If TocTree: was found add file to TocTree in the root Index.rst
      if [[ "$DocBlockFile" =~ ^TocTree:.* ]]; then
        DocBlockFile=$(echo "$DocBlockFile" | sed 's/^TocTree://');
        TocTree="$TocTree   $DocBlockFile"$'\n';
      fi  

      # Buld the file path for this doc block
      DocBlockFile=$DocBuilderRoot/$DocsSourceFolder/$DocBlockFile'.rst';

      # Remove Documentation:Start line from doc block
      DocBlock=$(echo "$DocBlock"  | grep -v 'Documentation:Start');

      # Create file and folders 
      atouch $DocBlockFile

      # Save doc block o dest file
      echo $DocBlock > $DocBlockFile 
  done; IFS=$OLDIFS 

done

# Write TocTree into root Index.rst
TocTree=`sed -e '/TocTreeInsert/{r /dev/stdin' -e ';d;}' $DocBuilderRoot/$DocsSourceFolder/Index.rst <<<"$TocTree"`
echo "$TocTree" > $DocBuilderRoot/$DocsSourceFolder/Index.rst

# Prepare conf.py

cp $DocBuilderRoot/conf.template $DocBuilderRoot/$DocsSourceFolder/conf.py

ConfPy=$(<$DocBuilderRoot/$DocsSourceFolder/conf.py)
ConfPy="${ConfPy//\$\{project\}/$Project}"
ConfPy="${ConfPy//\$\{copyright\}/$Copyright}"
ConfPy="${ConfPy//\$\{author\}/$Author}"
ConfPy="${ConfPy//\$\{release\}/$Release}"
echo "$ConfPy" > "$DocBuilderRoot/$DocsSourceFolder/conf.py"

# Prepare docker-compose.yml

cp -f $DocBuilderRoot/docker-compose.template $DocBuilderRoot/docker-compose.yml

DockerCompose=$(<$DocBuilderRoot/docker-compose.yml)
DockerCompose="${DockerCompose//\$\{source\}/$DocBuilderRoot/$DocsSourceFolder}"
DockerCompose="${DockerCompose//\$\{documentation\}/$DocsBuildFolder}"
echo "$DockerCompose" > "$DocBuilderRoot/docker-compose.yml"

# Run sphinx-build inside the build docker to create the documentation
docker compose --file $DocBuilderRoot/docker-compose.yml run sphinx sphinx-build -b html /mnt/source /mnt/Documentation

# Clean up after yourself!
test -d $DocBuilderRoot/$DocsSourceFolder && rm -rf $DocBuilderRoot/$DocsSourceFolder || : 
test -f $DocBuilderRoot/docker-compose.yml && rm -f $DocBuilderRoot/docker-compose.yml || : 
