#!/bin/bash


### Do not changs anything after this line, unless you know exactly what you are doing!!

DocsSourceBuilderStartFolder="";

# Check for command line arguments
if [ ! "$1" ];then
   echo "No config json file was given!"
   exit 1;
fi

# Get the where the script was started from path
FromPath=$PWD;

if [ ! -f "$FromPath/$1" ]; then
  printf "\n -> DocBuild canceled, config json does not exist.\n\n\n"

  exit 1;
fi

# Check if all parameter in config json are set
ConfigChecks="OK"
ConfigFile=$(<$FromPath/$1)
ConfigPath=$(dirname $FromPath/$1);

StartFolder=$( echo "$ConfigFile" | sed -n 's/.*\"StartFolder\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$StartFolder" ]
then
  printf "\n -> DocBuild canceled: Start folder was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
DocumentationFolder=$( echo "$ConfigFile" | sed -n 's/.*\"DocumentationFolder\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$DocumentationFolder" ]
then
  printf "\n -> DocBuild canceled: Documentation folder was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
DocumentationType=$( echo "$ConfigFile" | sed -n 's/.*\"DocumentationType\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$DocumentationType" ]
then
  printf "\n -> DocBuild canceled: Documentation type was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Project=$( echo "$ConfigFile" | sed -n 's/.*\"Project\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$Project" ]
then
  printf "\n -> DocBuild canceled: Project was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Copyright=$( echo "$ConfigFile" | sed -n 's/.*\"Copyright\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$Copyright" ]
then
  printf "\n -> DocBuild canceled: Copyright was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Author=$( echo "$ConfigFile" | sed -n 's/.*\"Author\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$Author" ]
then
  printf "\n -> DocBuild canceled: Author was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
Release=$( echo "$ConfigFile" | sed -n 's/.*\"Release\".*:.*\"\(.*\)\".*/\1/p' )
if [ -z "$Release" ]
then
  printf "\n -> DocBuild canceled: Release was not found in config json\n\n\n"
  ConfigChecks="FALSE"
fi
StaticFolder=$( echo "$ConfigFile" | sed -n 's/.*\"StaticFolder\".*:.*\"\(.*\)\".*/\1/p' )
if [ ! -z "$StaticFolder" ]; then
  if [ ! -d "$ConfigPath/$StaticFolder" ]; then
    printf "\n -> DocBuild canceled, StaticFolder $ConfigPath/$StaticFolder from config json does not exist.\n\n\n"

    exit 1;
  fi
fi
Favicon=$( echo "$ConfigFile" | sed -n 's/.*\"Favicon\".*:.*\"\(.*\)\".*/\1/p' )
if [ ! -z "$Favicon" ]; then
  if [ -z "$StaticFolder" ]; then
    printf "\n -> DocBuild canceled: StaticFolder was not found in config json but Favicon is set.\n\n\n"
    ConfigChecks="FALSE"
  fi
fi

TemplatesFolder=$( echo "$ConfigFile" | sed -n 's/.*\"TemplatesFolder\".*:.*\"\(.*\)\".*/\1/p' )
if [ ! -z "$TemplatesFolder" ]; then
  if [ ! -d "$ConfigPath/$TemplatesFolder" ]; then
    printf "\n -> DocBuild canceled, TemplatesFolder $ConfigPath/$TemplatesFolder from config json does not exist.\n\n\n"

    exit 1;
  fi
fi

# Check if the start folder exists relative from the start path
if [ -d "$FromPath/$StartFolder" ]
then
  DocsSourceBuilderStartFolder="$FromPath/$StartFolder";
else
  # If not check absolute
  if [ -d "$StartFolder" ]
  then
    DocsSourceBuilderStartFolder="$StartFolder";
  else
    echo "Start folder $StartFolder was not found";
    exit 1
  fi
fi

# Check if the documentation exists relative from the start path
if [ -d "$FromPath/$DocumentationFolder" ]
then
  DocsBuildFolder="$FromPath/$DocumentationFolder";
else
  # If not check absolute
  if [ -d "$DocumentationFolder" ]
  then
    DocsBuildFolder="$DocumentationFolder";
  else
    echo "Documentation folder $DocumentationFolder was not found";
    exit 1
  fi
fi

DocsSourceFolder='./source';

# Helper function to create a file in a source path and create folders if needed
atouch() {
  mkdir -p $(sed 's/\(.*\)\/.*/\1/' <<< $1) && touch $1
}

# Get the path this script is in
ScriptPath=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )'/..'
DocBuilderRoot=$(pushd $ScriptPath > /dev/null && pwd && popd > /dev/null)

# Setup clean source folder
test -d $DocBuilderRoot/$DocsSourceFolder && rm -rf $DocBuilderRoot/$DocsSourceFolder || :
mkdir -p $DocBuilderRoot/$DocsSourceFolder
cp -r $DocBuilderRoot/_static $DocBuilderRoot/$DocsSourceFolder/
cp -r $DocBuilderRoot/_templates $DocBuilderRoot/$DocsSourceFolder/
if [ ! -z "$StaticFolder" ]; then
  cp -r $ConfigPath/$StaticFolder/ $DocBuilderRoot/$DocsSourceFolder/_static
fi
if [ ! -z "$TemplatesFolder" ]; then
  cp -r $ConfigPath/$TemplatesFolder/ $DocBuilderRoot/$DocsSourceFolder/_templates
fi

declare -a TocTree=();

# Lookup all files starting at $DocsSourceBuilderStartFolder
for file in `find $DocsSourceBuilderStartFolder -name "*.php" -type f`; do

  # Search for DocBlocks
  OLDIFS=$IFS; IFS=';' DocBlocks=$(sed -n '/Documentation:Start/,/Documentation:End/ {/Documentation:Start/ s/^/\;/; p;}' $file);
  for DocBlock in ${DocBlocks#;}; do 

    # Get the block Indent to remove the leading * from every line
    DocBlockStart=$(echo "$DocBlock" | grep 'Documentation:Start');
    DocBlockIndent=$(echo "$DocBlock" | grep -bo '/\*\*' | sed 's/:.*$//');
    DocBlockIndent="$((DocBlockIndent + 2))"

    # Clean up DocBlock by removing php commend styles and cut of closing DocBlock line
    DocBlock=$(echo "$DocBlock" | sed -r "s/^.{$DocBlockIndent}//" | sed 's/^Documentation:End*//');
    DocBlockPath=$(echo "$DocBlock" | grep  'Documentation:Start' | sed 's/^.*Documentation:Start://');

    # If TocTree: was found add file to TocTree in the root Index.rst
    if [[ "$DocBlockPath" =~ ^TocTree:.* ]]; then
      DocBlockTocTreeFile=$(echo "$DocBlockPath" | sed 's/^TocTree://' | sed 's/.rst.*//');
      TocTree+=("$DocBlockTocTreeFile");
    fi

    # Clean up DocBlockFile name
    DocBlockFile=$( echo "$DocBlockPath" | sed 's/^TocTree://' )
    if [[ ${DocBlockFile:(-1)} == '.' ]]; then
      DocBlockFile=$( echo "$DocBlockFile" | sed 's/.\{1\}$//')
    fi

    # Build the file path for this doc block
    DocBlockFile=$DocBuilderRoot/$DocsSourceFolder/$DocBlockFile;

    # Remove Documentation:Start line from doc block
    DocBlock=$(echo "$DocBlock"  | grep -v 'Documentation:Start');

    # Create file and folders
    atouch $DocBlockFile

    # Save doc block o dest file
    echo "$DocBlock" > $DocBlockFile
  done; IFS=$OLDIFS
done

# Sort TocTree alphabetically
IFS=$'\n' TocTree=($(sort <<<"${TocTree[*]}"))
unset IFS

TocTreeInsert='';
for TocTreeItem in "${TocTree[@]}"
do
  TocTreeInsert="$TocTreeInsert   $TocTreeItem"$'\n';
   # or do whatever with individual element of the array
done

# Write TocTree into root Index.rst
RootIndex=$(<$DocBuilderRoot/$DocsSourceFolder/Index.rst)
RootIndex="${RootIndex//\TocTreeInsert/$TocTreeInsert}"
echo "$RootIndex" > "$DocBuilderRoot/$DocsSourceFolder/Index.rst"

# Prepare conf.py

cp $DocBuilderRoot/conf.template $DocBuilderRoot/$DocsSourceFolder/conf.py

ConfPy=$(<$DocBuilderRoot/$DocsSourceFolder/conf.py)
ConfPy="${ConfPy//\$\{project\}/$Project}"
ConfPy="${ConfPy//\$\{copyright\}/$Copyright}"
ConfPy="${ConfPy//\$\{author\}/$Author}"
ConfPy="${ConfPy//\$\{release\}/$Release}"
ConfPy="${ConfPy//\$\{favicon\}/$Favicon}"
echo "$ConfPy" > "$DocBuilderRoot/$DocsSourceFolder/conf.py"

# Clean up documentation folder before build
find "$DocsBuildFolder" -mindepth 1 -delete

# Check if image is buld
docker image ls | grep -q "sphinx-build" && dockerFound="true" || dockerFound="false";

if (! $dockerFound == "true"); then
  docker build --tag sphinx-build $DocBuilderRoot
fi

# Run sphinx-build inside the build docker to create the documentation
docker container run --name sphinx-build -it -v $DocBuilderRoot/$DocsSourceFolder:/mnt/source -v $DocsBuildFolder:/mnt/Documentation sphinx-build sphinx-build -b html /mnt/source /mnt/Documentation
# Remove build container
docker container rm sphinx-build

# Clean up after yourself!
test -d $DocBuilderRoot/$DocsSourceFolder && rm -rf $DocBuilderRoot/$DocsSourceFolder || :
test -f $DocBuilderRoot/docker-compose.yml && rm -f $DocBuilderRoot/docker-compose.yml || :
